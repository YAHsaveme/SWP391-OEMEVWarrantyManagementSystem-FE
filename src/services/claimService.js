// src/services/claimService.js
import axiosInstance from "./axiosInstance";

const BASE = "claims";

/**
 * üì¶ ENUM - Tr·∫°ng th√°i khi·∫øu n·∫°i (ClaimStatus)
 * ƒê·ªìng b·ªô ho√†n to√†n v·ªõi backend: com.example.Warranty.enums.ClaimStatus
 */
export const CLAIM_STATUS = {
  DIAGNOSING: "DIAGNOSING",      // ƒêang ch·∫©n ƒëo√°n l·ªói
  ESTIMATING: "ESTIMATING",      // ƒêang l·∫≠p b√°o gi√°
  UNDER_REVIEW: "UNDER_REVIEW",  // ƒêang ch·ªù xem x√©t / duy·ªát
  APPROVED: "APPROVED",          // ƒê√£ ƒë∆∞·ª£c duy·ªát
  COMPLETED: "COMPLETED",        // ƒê√£ ho√†n t·∫•t quy tr√¨nh
  REJECTED: "REJECTED",          // B·ªã t·ª´ ch·ªëi
};

/**
 * üß† claimService - Service qu·∫£n l√Ω Claims
 * G·ªìm ƒë·∫ßy ƒë·ªß t·∫•t c·∫£ API:
 * - GET /get-all
 * - GET /{id}/get
 * - GET /by-vin/{vin}/get
 * - GET /by-status/{status}/get
 * - POST /create
 * - PUT /{claimId}/update
 * - PUT /{claimId}/update-status
 */
const claimService = {
  /**
   * üßæ L·∫•y t·∫•t c·∫£ Claims
   * GET /api/claims/get-all
   * @returns {Promise<Array>} Danh s√°ch t·∫•t c·∫£ claims
   */
  async getAll() {
    const res = await axiosInstance.get(`${BASE}/get-all`);
    return res.data;
  },

  /**
   * üîç L·∫•y claim theo ID
   * GET /api/claims/{id}/get
   * @param {string} id - claimId (UUID)
   * @returns {Promise<Object>} D·ªØ li·ªáu claim
   */
  async getById(id) {
    if (!id) throw new Error("‚ö†Ô∏è claimId kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
    const res = await axiosInstance.get(`${BASE}/${id}/get`);
    return res.data;
  },

  /**
   * üöó L·∫•y danh s√°ch claim theo VIN
   * GET /api/claims/by-vin/{vin}/get
   * @param {string} vin - M√£ s·ªë khung xe
   * @returns {Promise<Array>} Danh s√°ch claims thu·ªôc VIN
   */
  async getByVin(vin) {
    if (!vin) throw new Error("‚ö†Ô∏è VIN kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
    const res = await axiosInstance.get(`${BASE}/by-vin/${encodeURIComponent(vin)}/get`);
    return res.data;
  },

  /**
   * üìä L·∫•y danh s√°ch claim theo tr·∫°ng th√°i
   * GET /api/claims/by-status/{status}/get
   * @param {string} status - M·ªôt trong c√°c gi√° tr·ªã thu·ªôc ClaimStatus enum
   * @returns {Promise<Array>} Danh s√°ch claim theo tr·∫°ng th√°i
   */
  async getByStatus(status) {
    if (!Object.values(CLAIM_STATUS).includes(status)) {
      throw new Error(
        `‚ö†Ô∏è Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá! Ph·∫£i l√† m·ªôt trong: ${Object.keys(CLAIM_STATUS).join(", ")}`
      );
    }
    const res = await axiosInstance.get(`${BASE}/by-status/${encodeURIComponent(status)}/get`);
    return res.data;
  },

  /**
   * ‚ûï T·∫°o m·ªõi Claim
   * POST /api/claims/create
   * @param {Object} payload - D·ªØ li·ªáu khi t·∫°o claim
   * {
   *   vin: string,
   *   claimType: string, // NORMAL, GOODWILL,...
   *   errorDate: string (ISO 8601),
   *   odometerKm: number,
   *   summary: string,
   *   attachmentUrls: [string],
   *   exclusion: string
   * }
   * @returns {Promise<Object>} Claim v·ª´a t·∫°o
   */
  async create(payload) {
    if (!payload?.vin) throw new Error("‚ö†Ô∏è VIN l√† b·∫Øt bu·ªôc!");
    if (!payload?.claimType) throw new Error("‚ö†Ô∏è claimType l√† b·∫Øt bu·ªôc!");
    if (!payload?.errorDate) throw new Error("‚ö†Ô∏è errorDate l√† b·∫Øt bu·ªôc!");

    // L√†m s·∫°ch d·ªØ li·ªáu tr∆∞·ªõc khi g·ª≠i
    const cleanPayload = {
      vin: payload.vin.trim(),
      claimType: payload.claimType.trim(),
      errorDate: new Date(payload.errorDate).toISOString(),
      odometerKm: Number(payload.odometerKm || 0),
      summary: payload.summary?.trim() || "",
      attachmentUrls: Array.isArray(payload.attachmentUrls)
        ? payload.attachmentUrls.filter((x) => x)
        : [],
      exclusion: payload.exclusion?.trim() || "",
    };

    const res = await axiosInstance.post(`${BASE}/create`, cleanPayload);
    return res.data;
  },

  /**
   * ‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin Claim
   * PUT /api/claims/{claimId}/update
   * @param {string} claimId - UUID c·ªßa claim
   * @param {Object} payload - D·ªØ li·ªáu c·∫≠p nh·∫≠t
   * {
   *   summary: string,
   *   attachmentUrls: [string],
   *   odometerKm: number,
   *   errorDate: string (ISO 8601),
   *   exclusion: string
   * }
   * @returns {Promise<Object>} Claim ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
   */
  async update(claimId, payload) {
    if (!claimId) throw new Error("‚ö†Ô∏è claimId l√† b·∫Øt bu·ªôc!");
    if (!payload) throw new Error("‚ö†Ô∏è payload kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");

    const cleanPayload = {
      summary: payload.summary?.trim() || "",
      attachmentUrls: Array.isArray(payload.attachmentUrls)
        ? payload.attachmentUrls.filter((x) => x)
        : [],
      odometerKm: Number(payload.odometerKm || 0),
      errorDate: payload.errorDate ? new Date(payload.errorDate).toISOString() : null,
      exclusion: payload.exclusion?.trim() || "",
    };

    const res = await axiosInstance.put(`${BASE}/${claimId}/update`, cleanPayload);
    return res.data;
  },

  /**
   * üîÑ C·∫≠p nh·∫≠t tr·∫°ng th√°i Claim
   * PUT /api/claims/{claimId}/update-status
   * @param {string} claimId - UUID c·ªßa claim
   * @param {string} status - Gi√° tr·ªã thu·ªôc ClaimStatus enum
   * @returns {Promise<Object>} Claim sau khi c·∫≠p nh·∫≠t tr·∫°ng th√°i
   */
  async updateStatus(claimId, status) {
    if (!claimId) throw new Error("‚ö†Ô∏è claimId l√† b·∫Øt bu·ªôc!");
    if (!Object.values(CLAIM_STATUS).includes(status)) {
      throw new Error(
        `‚ö†Ô∏è Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá! Ch·ªâ ch·∫•p nh·∫≠n: ${Object.keys(CLAIM_STATUS).join(", ")}`
      );
    }

    const res = await axiosInstance.put(`${BASE}/${claimId}/update-status`, { status });
    return res.data;
  },
};

export default claimService;
