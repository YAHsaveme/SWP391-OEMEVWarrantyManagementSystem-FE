import axiosInstance from "./axiosInstance";

/**
 * ============================
 * scheduleService (Full Version)
 * ============================
 * Bao g·ªìm ƒë·∫ßy ƒë·ªß API endpoints:
 *  - GET  /api/auth/staff/technicians
 *  - GET  /api/technicians/{technicianId}/schedules/get-slots
 *  - POST /api/technicians/{technicianId}/schedules/book
 *  - POST /api/technicians/{technicianId}/schedules/cancel
 *  - POST /api/technicians/{technicianId}/schedules/restore
 *  - POST /api/technicians/{technicianId}/schedules/generate-month
 *  - POST /api/technicians/{technicianId}/schedules/create-sunday
 */

const API_BASE_TECH = "technicians";

/* ------------------------------------------------------------- */
/* üß© Helper functions */
/* ------------------------------------------------------------- */

/** ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ chu·∫©n */
const result = (success, message, data = null, meta = {}) => ({
  success,
  message,
  data,
  meta,
});

/** T·∫°m d·ª´ng (cho retry) */
const delay = (ms) => new Promise((r) => setTimeout(r, ms));

/** G·ªçi POST c√≥ retry */
async function postWithRetry(url, payload, retries = 1, delayMs = 400) {
  let lastError = null;
  for (let i = 0; i <= retries; i++) {
    try {
      const res = await axiosInstance.post(url, payload);
      return res;
    } catch (err) {
      lastError = err;
      if (i < retries) {
        console.warn(`[Retry ${i + 1}] ${url}`);
        await delay(delayMs);
      }
    }
  }
  throw lastError;
}

/* ------------------------------------------------------------- */
/* ‚öôÔ∏è Service ch√≠nh */
/* ------------------------------------------------------------- */

const scheduleService = {
  /**
   * üìò L·∫•y danh s√°ch t·∫•t c·∫£ k·ªπ thu·∫≠t vi√™n
   * GET /api/technicians/get-all
   */
  async getAll() {
    try {
      const res = await axiosInstance.get(`${API_BASE_TECH}/get-all`);
      const data = res?.data ?? [];
      return data;
    } catch (err) {
      console.error("‚ùå technicianService.getAll error:", err);
      throw err;
    }
  },

  /**
   * üìÖ L·∫•y l·ªãch (slots) c·ªßa k·ªπ thu·∫≠t vi√™n theo kho·∫£ng ng√†y
   * GET /api/technicians/{technicianId}/schedules/get-slots?from=&to=
   */
  async getTechnicianSlots(technicianId, from, to) {
    if (!technicianId || !from || !to)
      return result(false, "Thi·∫øu technicianId ho·∫∑c kho·∫£ng th·ªùi gian (from, to)");

    try {
      const res = await axiosInstance.get(`${API_BASE_TECH}/${technicianId}/schedules/get-slots`, {
        params: { from, to },
      });

      const data = res?.data ?? {};
      let slots = [];
      if (Array.isArray(data.days)) {
        slots = data.days.flatMap((d) =>
          d.slots.map((s) => ({
            id: s.id,
            workDate: d.workDate,
            startTime: s.startTime,
            endTime: s.endTime,
            status: s.status,
            note: s.note,
          }))
        );
      }
      return result(true, "L·∫•y l·ªãch l√†m vi·ªác th√†nh c√¥ng", slots, { raw: data });
    } catch (err) {
      console.error("‚ùå getTechnicianSlots error:", err);
      return result(false, err?.response?.data?.message || "L·ªói khi l·∫•y l·ªãch l√†m vi·ªác", null, { error: err });
    }
  },

  /**
   * üïí ƒê·∫∑t l·ªãch
   * POST /api/technicians/{technicianId}/schedules/book
   */
  async bookSchedule(technicianId, payload) {
    if (!technicianId) return result(false, "Thi·∫øu technicianId ƒë·ªÉ ƒë·∫∑t l·ªãch");
    const required = ["centerId", "workDate", "startTime"];
    for (const f of required) if (!payload?.[f]) return result(false, `Thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc: ${f}`);

    try {
      const res = await postWithRetry(`${API_BASE_TECH}/${technicianId}/schedules/book`, {
        centerId: payload.centerId,
        workDate: payload.workDate,
        startTime: payload.startTime,
        note: payload.note || "",
      });
      return result(true, res.data?.message || "ƒê·∫∑t l·ªãch th√†nh c√¥ng", res.data, {
        affectedSlots: res.data?.affectedSlots,
        operationId: res.data?.operationId,
      });
    } catch (err) {
      console.error("‚ùå bookSchedule error:", err);
      return result(false, err?.response?.data?.message || "L·ªói khi ƒë·∫∑t l·ªãch", null, { error: err });
    }
  },

  /**
   * ‚ùå H·ªßy l·ªãch
   * POST /api/technicians/{technicianId}/schedules/cancel
   */
  async cancelSchedule(technicianId, payload) {
    if (!technicianId) return result(false, "Thi·∫øu technicianId ƒë·ªÉ h·ªßy l·ªãch");
    const required = ["dateFrom", "dateTo", "slotTimes"];
    for (const f of required) if (!payload?.[f]) return result(false, `Thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc: ${f}`);

    try {
      const res = await postWithRetry(`${API_BASE_TECH}/${technicianId}/schedules/cancel`, {
        dateFrom: payload.dateFrom,
        dateTo: payload.dateTo,
        slotTimes: payload.slotTimes,
        note: payload.note || "",
      });
      return result(true, res.data?.message || "H·ªßy l·ªãch th√†nh c√¥ng", res.data, {
        affectedSlots: res.data?.affectedSlots,
        operationId: res.data?.operationId,
      });
    } catch (err) {
      console.error("‚ùå cancelSchedule error:", err);
      return result(false, err?.response?.data?.message || "L·ªói khi h·ªßy l·ªãch", null, { error: err });
    }
  },

  /**
   * üîÑ Kh√¥i ph·ª•c l·ªãch
   * POST /api/technicians/{technicianId}/schedules/restore
   */
  async restoreSchedule(technicianId, payload) {
    if (!technicianId) return result(false, "Thi·∫øu technicianId ƒë·ªÉ kh√¥i ph·ª•c l·ªãch");
    const required = ["dateFrom", "dateTo", "slotTimes"];
    for (const f of required) if (!payload?.[f]) return result(false, `Thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc: ${f}`);

    try {
      const res = await postWithRetry(`${API_BASE_TECH}/${technicianId}/schedules/restore`, {
        dateFrom: payload.dateFrom,
        dateTo: payload.dateTo,
        slotTimes: payload.slotTimes,
      });
      return result(true, res.data?.message || "Kh√¥i ph·ª•c l·ªãch th√†nh c√¥ng", res.data, {
        affectedSlots: res.data?.affectedSlots,
        operationId: res.data?.operationId,
      });
    } catch (err) {
      console.error("‚ùå restoreSchedule error:", err);
      return result(false, err?.response?.data?.message || "L·ªói khi kh√¥i ph·ª•c l·ªãch", null, { error: err });
    }
  },

  /**
   * üóìÔ∏è T·∫°o l·ªãch th√°ng
   * POST /api/technicians/{technicianId}/schedules/generate-month
   */
  async generateMonthSchedule(technicianId, payload) {
    if (!technicianId) return result(false, "Thi·∫øu technicianId ƒë·ªÉ t·∫°o l·ªãch th√°ng");
    const required = ["targetMonth"];
    for (const f of required) if (!payload?.[f]) return result(false, `Thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc: ${f}`);

    try {
      const res = await postWithRetry(`${API_BASE_TECH}/${technicianId}/schedules/generate-month`, {
        centerId: payload.centerId,
        targetMonth: payload.targetMonth,
      });
      return result(true, res.data?.message || "T·∫°o l·ªãch th√°ng th√†nh c√¥ng", res.data, {
        affectedSlots: res.data?.affectedSlots,
        operationId: res.data?.operationId,
      });
    } catch (err) {
      console.error("‚ùå generateMonthSchedule error:", err);
      return result(false, err?.response?.data?.message || "L·ªói khi t·∫°o l·ªãch th√°ng", null, { error: err });
    }
  },

  /**
   * ‚òÄÔ∏è T·∫°o ca Ch·ªß Nh·∫≠t
   * POST /api/technicians/{technicianId}/schedules/create-sunday
   */
  async createSundaySchedule(technicianId, payload) {
    if (!technicianId) return result(false, "Thi·∫øu technicianId ƒë·ªÉ t·∫°o ca Ch·ªß Nh·∫≠t");
    const required = ["centerId", "date"];
    for (const f of required) if (!payload?.[f]) return result(false, `Thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc: ${f}`);

    try {
      const res = await postWithRetry(`${API_BASE_TECH}/${technicianId}/schedules/create-sunday`, {
        centerId: payload.centerId,
        date: payload.date,
      });
      return result(true, res.data?.message || "T·∫°o ca Ch·ªß Nh·∫≠t th√†nh c√¥ng", res.data, {
        affectedSlots: res.data?.affectedSlots,
        operationId: res.data?.operationId,
      });
    } catch (err) {
      console.error("‚ùå createSundaySchedule error:", err);
      return result(false, err?.response?.data?.message || "L·ªói khi t·∫°o ca Ch·ªß Nh·∫≠t", null, { error: err });
    }
  },
};

export default scheduleService;
